name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, front]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies and test
        working-directory: my_memo_master_${{ matrix.service }}
        run: |
          npm install
          npm run test

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Nécessaire pour SonarQube

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Optionnel : Vérifier la passerelle qualité
      # - name: Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: sonar_analysis
    if: success()
    steps:
      - name: Send message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/SYbQQkWKTJUAAAAd/vilebrequin-vilebrequin-winamax.gif"
            "https://media1.tenor.com/m/2C6IrDSSZ4EAAAAd/vilebrequin-vilebrequin-winamax.gif"
            "https://media1.tenor.com/m/Fl1OdPlcQ20AAAAC/vilebrequin-vilebrequin-dos-d-ane.gif"
            "https://media1.tenor.com/m/LbNXxiA2KlgAAAAC/vilebrequin-sylvain.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Project is ready to build and deploy! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, sonar_analysis]
    if: success()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Modify docker-compose.yml
        run: |
          sed -i '/#start sgbd/,/#end sgbd/d' docker-compose.yml
          sed -i '/- PG_PORT=${PG_PORT}/a \ \ \ \ networks:\n\ \ \ \ - mynetwork' docker-compose.yml
          sed -i '/front-data:\/app\/data/a \networks:\n  mynetwork:\n    external: true' docker-compose.yml
      - name: Deploy to VPS
        run: |
          rsync -avz --exclude-from='.scpignore' -e "ssh -o StrictHostKeyChecking=no" . root@${{ secrets.VPS_IP }}:/var/www/html/mymemomaster
          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            set -e
            # Vérifier les dépendances Node.js
            if [ -d "/var/www/html/mymemomaster/my_memo_master_api" ]; then
              cd /var/www/html/mymemomaster/my_memo_master_api
              npm install
            fi
            if [ -d "/var/www/html/mymemomaster/my_memo_master_front" ]; then
              cd /var/www/html/mymemomaster/my_memo_master_front
              npm install
            fi
            # Déployer avec Docker Compose
            cd /var/www/html/mymemomaster
            docker-compose down
            docker-compose build
            docker-compose up -d
          EOF

  build_failure:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: failure()
    steps:
      - name: Send message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/asSa0XkcXXwAAAAd/rocket-failure-explode.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"deploy failed! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  build_success:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: success()
    steps:
      - name: Send success message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/NvmqvFu5FPIAAAAd/agile-rocket.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"deploy success! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}