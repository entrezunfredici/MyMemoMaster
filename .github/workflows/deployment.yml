# *this file* https://media1.tenor.com/m/69J_vOZhULQAAAAd/oss117-bordel.gif 

name: Build and Deploy

on:
  push:
    branches:
      - main
      - dev
      - '*devops*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, front]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Install Dependencies and Run Tests
        working-directory: my_memo_master_${{ matrix.service }}
        run: |
          npm install
          npm run test

  test_failure:
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - name: Send Test Failure Notification to Discord
        run: |
          URLS=( 
            "https://media1.tenor.com/m/4CtiBiTdmioAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/GgnOYuwPdAIAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/OlLPEZbtPEYAAAAd/vilebrequin-vilebrequin-telemerding.gif"
            "https://media1.tenor.com/m/-o0dTiU5Ow4AAAAd/vilebrequin-vilebrequin-cpt.gif"
            "https://media1.tenor.com/m/eMOeGcx_o54AAAAd/crash-bus.gif"
            "https://media1.tenor.com/m/0y5lOt_Y450AAAAd/vilebrequin-vilebrequin-cpt.gif"
            "https://media1.tenor.com/m/hoRt31ZDmPEAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/gD2lZPrYVW4AAAAC/vilebrequin-vilebrequin-sylvain-levy.gif"
            "https://media1.tenor.com/m/sBEng5B5vbwAAAAC/cat-cats.gif"
            "https://media1.tenor.com/m/1c70Jy7WZI8AAAAd/cat.gif" 
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests failed on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  test_success:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Send Test Success Notification to Discord
        run: |
          URLS=( 
            "https://media1.tenor.com/m/BhPivX5RaGgAAAAd/vilebrequin-vilbrequin.gif"
            "https://media1.tenor.com/m/-c-taOTKNN8AAAAd/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/4Nxe3sCkjVcAAAAd/vilebrequin-vilbrequin.gif"
            "https://media1.tenor.com/m/uPogt0rnqKoAAAAd/rosycheeks-approved.gif"
            "https://media1.tenor.com/m/eAwDugg8aBgAAAAd/kitty-meow.gif"
            "https://media1.tenor.com/m/wjS2sXen8iMAAAAd/stonks-up-stongs.gif" 
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests succeeded on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  sonar_analysis:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: success() && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run SonarQube Prod Scan
        if: github.ref == 'refs/heads/main'
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_PROD_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Run SonarQube PreProd Scan
        if: startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_PREPROD_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # sonar_analysis_failure:
  #   name: Notify SonarQube Failure
  #   runs-on: ubuntu-latest
  #   needs: sonar_analysis
  #   if: failure()
  #   steps:
  #     - name: Send SonarQube Failure Notification to Discord
  #       run: |
  #         curl -X POST -H "Content-Type: application/json" \
  #         -d "{\"content\": \"SonarQube analysis failed on branch $GITHUB_REF!\"}" \
  #         ${{ secrets.DISCORD_LOG }}

  push_on_docker_hub:
    name: Build and Deploy on docker hub
    runs-on: ubuntu-latest
    needs: test
    if: success() && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Deploy Docker Prod Images
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_api:latest -f my_memo_master_api/Dockerfile my_memo_master_api/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_api:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_front:latest -f my_memo_master_front/Dockerfile my_memo_master_front/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_front:latest

      - name: Build and Deploy Docker PreProd Images
        if: startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_test_api:latest -f my_memo_master_api/Dockerfile my_memo_master_api/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_test_api:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_test_front:latest -f my_memo_master_front/Dockerfile my_memo_master_front/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mymemomaster_test_front:latest

  build_and_deploy:
    name: Deploy on server
    runs-on: ubuntu-latest
    needs: push_on_docker_hub
    # needs: [push_on_docker_hub, sonar_analysis]
    if: success() && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      

      # ─────── 1. SSH agent ───────
      - name: Set up SSH prod for Deployment
        if: github.ref == 'refs/heads/main'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PROD_PRIVATE_KEY }}

      - name: Set up SSH preprod for Deployment
        if: startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PREPROD_PRIVATE_KEY }}

      # ─────── 2. known_hosts ───────
      - name: Prepare SSH known_hosts for preprod
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        run: |
          ssh-keyscan -p ${{ secrets.VPS_PORT }} -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      # ─────── 3. SCP Upload ───────
      - name: Upload docker-compose.yml to vps in prod
        if: github.ref == 'refs/heads/main'
        run: |
          scp -v -P ${{ secrets.VPS_PORT }} \
            server_docker_compose/prod/docker-compose.yml \
            ${{ secrets.SSH_PROD_USERNAME }}@${{ secrets.VPS_IP }}:/var/www/html/my_memo_master_prod/docker-compose.yml

      - name: Upload docker-compose.yml to vps in preprod
        if: startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        run: |
          scp -v -P ${{ secrets.VPS_PORT }} \
            server_docker_compose/preprod/docker-compose.yml \
            ${{ secrets.SSH_PREPROD_USERNAME }}@${{ secrets.VPS_IP }}:/var/www/html/my_memo_master_preprod/docker-compose.yml

      # ─────── 4. SSH Déployment ───────
      - name: Deploy to VPS in prod
        if: github.ref == 'refs/heads/main'
        run: |
          ssh -p ${{ secrets.VPS_PORT }} ${{ secrets.SSH_PROD_USERNAME }}@${{ secrets.VPS_IP }} << 'EOF'
            cd /var/www/html/my_memo_master_prod
            docker-compose pull
            docker-compose up -d
          EOF

      - name: Deploy to VPS in preprod
        if: startsWith(github.ref, 'refs/heads/dev') || contains(github.ref, 'devops')
        run: |
          ssh -p ${{ secrets.VPS_PORT }} ${{ secrets.SSH_PREPROD_USERNAME }}@${{ secrets.VPS_IP }} << 'EOF'
            cd /var/www/html/my_memo_master_preprod
            docker-compose pull
            docker-compose up -d
          EOF

  build_failure:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: failure()
    steps:
      - name: Notify Deployment Failure
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Deployment failed on branch $GITHUB_REF!\"}" \
          ${{ secrets.DISCORD_LOG }}

  build_success:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: success()
    steps:
      - name: Notify Deployment Success
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Deployment succeeded on branch $GITHUB_REF!\"}" \
          ${{ secrets.DISCORD_LOG }}
