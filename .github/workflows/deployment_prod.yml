# *Ce fichier* https://media1.tenor.com/m/69J_vOZhULQAAAAd/oss117-bordel.gif

name: Build and Deploy

on:
  push:
    branches:
      - main
      - dev_*
      - '*devops*' # Add a branch to test the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, front]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Install Dependencies and Run Tests
        working-directory: my_memo_master_${{ matrix.service }}
        run: |
          npm install
          npm run test

  test_failure:
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - name: Send Test Failure Notification to Discord
        run: |
          URLS=( 
            "https://media1.tenor.com/m/4CtiBiTdmioAAAAC/vilebrequin-sylvain.gif" 
            "https://media1.tenor.com/m/GgnOYuwPdAIAAAAC/vilebrequin-sylvain.gif" 
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests failed on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  test_success:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Send Test Success Notification to Discord
        run: |
          URLS=( 
            "https://media1.tenor.com/m/BhPivX5RaGgAAAAd/vilebrequin-vilbrequin.gif" 
            "https://media1.tenor.com/m/uPogt0rnqKoAAAAd/rosycheeks-approved.gif" 
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests succeeded on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  # sonar_analysis:
  #   name: Run SonarQube Analysis
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: Run SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@v3
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # sonar_analysis_failure:
  #   name: Notify SonarQube Failure
  #   runs-on: ubuntu-latest
  #   needs: sonar_analysis
  #   if: failure()
  #   steps:
  #     - name: Send SonarQube Failure Notification to Discord
  #       run: |
  #         curl -X POST -H "Content-Type: application/json" \
  #         -d "{\"content\": \"SonarQube analysis failed on branch $GITHUB_REF!\"}" \
  #         ${{ secrets.DISCORD_LOG }}

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    # needs: [test, sonar_analysis]
    if: success()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH for Deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS in prod 
        if: github.ref == 'refs/heads/main'
        run: |
          # Sync files to VPS
          rsync -avz --exclude-from='.scpignore' -e "ssh -o StrictHostKeyChecking=no" . root@${{ secrets.VPS_IP }}:/var/www/html/mymemomaster
          
          # Execute remote commands to build and run Docker Compose
          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            set -e

            # Navigate to project directory
            cd /var/www/html/mymemomaster

            # Stop, rebuild, and start services
            docker-compose down
            docker-compose build
            docker-compose up -d
          EOF
      - name: Deploy to VPS in prod 
        if: github.ref == 'refs/heads/main'
        run: |
          # Sync files to VPS
          rsync -avz --exclude-from='.scpignore' -e "ssh -o StrictHostKeyChecking=no" . root@${{ secrets.VPS_IP }}:/var/www/html/mymemomaster
          
          # Execute remote commands to build and run Docker Compose
          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            set -e

            # Navigate to project directory
            cd /var/www/html/mymemomaster

            # Stop, rebuild, and start services
            docker-compose down
            docker-compose build
            docker-compose up -d
          EOF

      - name: Deploy to VPS in preprod 
        if: startsWith(github.ref, 'refs/heads/dev') || startsWith(github.ref, 'refs/heads/dev_cicd')
        run: |
          # Sync files to VPS
          rsync -avz --exclude-from='.scpignore' -e "ssh -o StrictHostKeyChecking=no" . root@${{ secrets.VPS_IP }}:/var/www/html/mymemomastertest
          
          # Execute remote commands to build and run Docker Compose
          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            set -e

            # Navigate to project directory
            cd /var/www/html/mymemomastertest

            # Stop, rebuild, and start services
            docker-compose down
            docker-compose build
            docker-compose up -d
          EOF

  build_failure:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: failure()
    steps:
      - name: Notify Deployment Failure
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Deployment failed on branch $GITHUB_REF!\"}" \
          ${{ secrets.DISCORD_LOG }}

  build_success:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    if: success()
    steps:
      - name: Notify Deployment Success
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Deployment succeeded on branch $GITHUB_REF!\"}" \
          ${{ secrets.DISCORD_LOG }}
