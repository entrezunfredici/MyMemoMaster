name: Build and Deploy in test env

on:
  push:
    branches:
      - dev_cicd
      - dev

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, front]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies and test
        working-directory: my_memo_master_${{ matrix.service }}
        run: |
          npm install
          npm run test

  notify_failure:
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - name: Send message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/4CtiBiTdmioAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/GgnOYuwPdAIAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/OlLPEZbtPEYAAAAd/vilebrequin-vilebrequin-telemerding.gif"
            "https://media1.tenor.com/m/-o0dTiU5Ow4AAAAd/vilebrequin-vilebrequin-cpt.gif"
            "https://media1.tenor.com/m/eMOeGcx_o54AAAAd/crash-bus.gif"
            "https://media1.tenor.com/m/0y5lOt_Y450AAAAd/vilebrequin-vilebrequin-cpt.gif"
            "https://media1.tenor.com/m/hoRt31ZDmPEAAAAC/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/gD2lZPrYVW4AAAAC/vilebrequin-vilebrequin-sylvain-levy.gif"
            "https://media1.tenor.com/m/sBEng5B5vbwAAAAC/cat-cats.gif"
            "https://media1.tenor.com/m/1c70Jy7WZI8AAAAd/cat.gif"
            "https://media1.tenor.com/m/GElyvue_13cAAAAd/april-fools-joke.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests failed on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  notify_success:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Send success message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/BhPivX5RaGgAAAAd/vilebrequin-vilbrequin.gif"
            "https://media1.tenor.com/m/-c-taOTKNN8AAAAd/vilebrequin-sylvain.gif"
            "https://media1.tenor.com/m/4Nxe3sCkjVcAAAAd/vilebrequin-vilbrequin.gif"
            "https://media1.tenor.com/m/uPogt0rnqKoAAAAd/rosycheeks-approved.gif"
            "https://media1.tenor.com/m/eAwDugg8aBgAAAAd/kitty-meow.gif"
            "https://media1.tenor.com/m/wjS2sXen8iMAAAAd/stonks-up-stongs.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          BRANCH_NAME=${GITHUB_REF##*/}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Tests succeeded on branch $BRANCH_NAME! $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Nécessaire pour SonarQube

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Optionnel : Vérifier la passerelle qualité
      # - name: Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: sonar_analysis
    if: success()
    steps:
      - name: Send message to Discord
        run: |
          URLS=(
            "https://media1.tenor.com/m/SYbQQkWKTJUAAAAd/vilebrequin-vilebrequin-winamax.gif"
            "https://media1.tenor.com/m/2C6IrDSSZ4EAAAAd/vilebrequin-vilebrequin-winamax.gif"
            "https://media1.tenor.com/m/Fl1OdPlcQ20AAAAC/vilebrequin-vilebrequin-dos-d-ane.gif"
            "https://media1.tenor.com/m/LbNXxiA2KlgAAAAC/vilebrequin-sylvain.gif"
          )
          RANDOM_URL=${URLS[$RANDOM % ${#URLS[@]}]}
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"Project is ready to build and deploy! on test env* $RANDOM_URL\"}" \
          ${{ secrets.DISCORD_LOG }}

  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          rsync -avz --exclude-from='.scpignore' -e "ssh -o StrictHostKeyChecking=no" . root@${{ secrets.VPS_IP }}:/var/www/html/mymemomastertest

          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            set -e
            # Donner les permissions au script
            chmod +x /var/www/html/mymemomastertest/modify-docker-compose.sh
            # Exécuter le script pour modifier docker-compose.yml
            /var/www/html/mymemomastertest/modify-docker-compose.sh

            # Vérifier les dépendances Node.js
            if [ -d "/var/www/html/mymemomastertest/my_memo_master_api" ]; then
              cd /var/www/html/mymemomastertest/my_memo_master_api
              npm install
            fi

            if [ -d "/var/www/html/mymemomastertest/my_memo_master_front" ]; then
              cd /var/www/html/mymemomastertest/my_memo_master_front
              npm install
            fi

            # Déployer avec Docker Compose
            cd /var/www/html/mymemomastertest
            docker-compose down
            docker-compose build
            docker-compose up -d
          EOF

      - name: Clean Docker resources
        run: |
          ssh root@${{ secrets.VPS_IP }} << 'EOF'
            docker system prune -af
          EOF