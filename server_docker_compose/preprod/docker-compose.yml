version: "3.3"

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [mmm_preprod]

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - "traefik.http.routers.mmm-pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)"
      - traefik.http.routers.mmm-pgadmin.entrypoints=websecure
      - traefik.http.routers.mmm-pgadmin.tls.certresolver=letsencrypt
      - traefik.http.services.mmm-pgadmin.loadbalancer.server.port=80
      - traefik.docker.network=traefik_proxy
    networks: [mmm_preprod, traefik_proxy]

  api:
    image: ${IMAGE_API}
    restart: unless-stopped
    env_file: [.env]
    environment:
      NODE_ENV: production
      PORT: ${API_PORT}      # 3000 ou 8001, selon lâ€™image
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${PG_USER}
      PGPASSWORD: ${PG_PASS}
      PGDATABASE: ${PG_DB}
      CORS_ORIGIN: https://${FRONT_DOMAIN}
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - "traefik.http.routers.mmm-api.rule=Host(`${API_DOMAIN}`)"
      - traefik.http.routers.mmm-api.entrypoints=websecure
      - traefik.http.routers.mmm-api.tls.certresolver=letsencrypt
      - "traefik.http.services.mmm-api.loadbalancer.server.port=${API_PORT}"
      - traefik.docker.network=traefik_proxy
    networks: [mmm_preprod, traefik_proxy]
    volumes:
      - api-data:/app/data

  front:
    image: ${IMAGE_FRONT}
    restart: unless-stopped
    environment:
      APP_PUBLIC_URL: https://${FRONT_DOMAIN}
      APP_API_URL:    https://${API_DOMAIN}
    depends_on:
      - api
    labels:
      - traefik.enable=true
      - "traefik.http.routers.mmm-front.rule=Host(`${FRONT_DOMAIN}`)"
      - traefik.http.routers.mmm-front.entrypoints=websecure
      - traefik.http.routers.mmm-front.tls.certresolver=letsencrypt
      - traefik.http.services.mmm-front.loadbalancer.server.port=80
      - traefik.docker.network=traefik_proxy
    networks: [mmm_preprod, traefik_proxy]
    volumes:
      - front-data:/app/data

volumes:
  api-data:
  front-data:
  postgres-data:
  pgadmin-data:

networks:
  mmm_preprod:
    driver: bridge
  traefik_proxy:
    external: true
